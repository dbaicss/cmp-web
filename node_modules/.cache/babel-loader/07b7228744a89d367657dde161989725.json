{"remainingRequest":"/Users/xuyangbing/Desktop/devopsManage/client/node_modules/babel-loader/lib/index.js!/Users/xuyangbing/Desktop/devopsManage/client/src/http.js","dependencies":[{"path":"/Users/xuyangbing/Desktop/devopsManage/client/src/http.js","mtime":1543230872000},{"path":"/Users/xuyangbing/Desktop/devopsManage/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/xuyangbing/Desktop/devopsManage/client/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from 'axios';\nimport { Loading } from 'element-ui';\nimport { Message } from 'element-ui';\nimport router from './router';\nvar loading; //加载动画\n\nfunction startLoading() {\n  loading = Loading.service({\n    lock: true,\n    //锁定\n    text: '拼命加载中...',\n    //loading时显示\n    background: 'rgba(0,0,0,7)'\n  });\n}\n\nfunction endLoading() {\n  loading.close();\n} //请求拦截,加载动画\n\n\naxios.interceptors.request.use(function (config) {\n  //加载动画\n  startLoading();\n\n  if (localStorage.eleToken) {\n    //设置http头\n    config.headers.Authorization = localStorage.eleToken;\n  }\n\n  return config;\n}, function (error) {\n  return Promise.reject(error); //返回错误\n}); //响应拦截,关闭动画\n\naxios.interceptors.response.use(function (response) {\n  //结束加载动画\n  endLoading();\n  return response;\n}, function (error) {\n  //错误提醒\n  endLoading();\n  Message.error(error.response.data); //获取状态码\n\n  var status = error.response.status;\n\n  if (status == 401) {\n    //状态码为401,表示token过期,删除过期token\n    Message.error(\"token过期,请重新登录!\"); //清除token\n\n    localStorage.removeItem(\"eleToken\");\n    router.push('/login');\n  }\n\n  return Promise.reject(error);\n});\nexport default axios;",{"version":3,"sources":["/Users/xuyangbing/Desktop/devopsManage/client/src/http.js"],"names":["axios","Loading","Message","router","loading","startLoading","service","lock","text","background","endLoading","close","interceptors","request","use","config","localStorage","eleToken","headers","Authorization","error","Promise","reject","response","data","status","removeItem","push"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,IAAIC,OAAJ,C,CAAe;;AACf,SAASC,YAAT,GAAwB;AACpBD,EAAAA,OAAO,GAAGH,OAAO,CAACK,OAAR,CAAgB;AACtBC,IAAAA,IAAI,EAAE,IADgB;AACT;AACbC,IAAAA,IAAI,EAAE,UAFgB;AAEF;AACpBC,IAAAA,UAAU,EAAE;AAHU,GAAhB,CAAV;AAKH;;AAGD,SAASC,UAAT,GAAsB;AAClBN,EAAAA,OAAO,CAACO,KAAR;AACH,C,CACD;;;AACAX,KAAK,CAACY,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAA+B,UAAAC,MAAM,EAAI;AACjC;AACAV,EAAAA,YAAY;;AACZ,MAAGW,YAAY,CAACC,QAAhB,EAA0B;AACtB;AACAF,IAAAA,MAAM,CAACG,OAAP,CAAeC,aAAf,GAA+BH,YAAY,CAACC,QAA5C;AACH;;AACD,SAAOF,MAAP;AACH,CARL,EAQM,UAAAK,KAAK,EAAI;AACP,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP,CADO,CAC0B;AACpC,CAVL,E,CAcA;;AACApB,KAAK,CAACY,YAAN,CAAmBW,QAAnB,CAA4BT,GAA5B,CAAgC,UAAAS,QAAQ,EAAI;AACpC;AACAb,EAAAA,UAAU;AACV,SAAOa,QAAP;AACH,CAJL,EAIM,UAAAH,KAAK,EAAI;AACP;AACAV,EAAAA,UAAU;AACVR,EAAAA,OAAO,CAACkB,KAAR,CAAcA,KAAK,CAACG,QAAN,CAAeC,IAA7B,EAHO,CAIP;;AAJO,MAKAC,MALA,GAKWL,KAAK,CAACG,QALjB,CAKAE,MALA;;AAMP,MAAIA,MAAM,IAAE,GAAZ,EAAiB;AAAG;AAChBvB,IAAAA,OAAO,CAACkB,KAAR,CAAc,gBAAd,EADa,CAEb;;AACAJ,IAAAA,YAAY,CAACU,UAAb,CAAwB,UAAxB;AACAvB,IAAAA,MAAM,CAACwB,IAAP,CAAY,QAAZ;AACH;;AACD,SAAON,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAjBL;AAqBA,eAAgBpB,KAAhB","sourcesContent":["import axios from 'axios';\nimport { Loading } from 'element-ui';\nimport { Message } from 'element-ui';\nimport router from './router'\n\nlet loading;   //加载动画\nfunction startLoading() {\n    loading = Loading.service({\n        lock: true,  //锁定\n        text: '拼命加载中...',   //loading时显示\n        background: 'rgba(0,0,0,7)'\n    })\n}\n\n\nfunction endLoading() {\n    loading.close();\n}\n//请求拦截,加载动画\naxios.interceptors.request.use(config => {\n        //加载动画\n        startLoading();\n        if(localStorage.eleToken) {\n            //设置http头\n            config.headers.Authorization = localStorage.eleToken;\n        }\n        return config;\n    },error => {\n        return Promise.reject(error);    //返回错误\n    }\n);\n\n\n//响应拦截,关闭动画\naxios.interceptors.response.use(response => {\n        //结束加载动画\n        endLoading();\n        return response;\n    },error => {\n        //错误提醒\n        endLoading();\n        Message.error(error.response.data);\n        //获取状态码\n        const {status} =  error.response;\n        if (status==401) {  //状态码为401,表示token过期,删除过期token\n            Message.error(\"token过期,请重新登录!\");\n            //清除token\n            localStorage.removeItem(\"eleToken\");\n            router.push('/login');\n        }\n        return Promise.reject(error);\n    }\n);\n\n\nexport default  axios;\n"]}]}
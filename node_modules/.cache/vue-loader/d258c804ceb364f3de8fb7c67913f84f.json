{"remainingRequest":"/Users/xuyangbing/Desktop/devopsManage/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/xuyangbing/Desktop/devopsManage/client/src/views/Xterm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/xuyangbing/Desktop/devopsManage/client/src/views/Xterm.vue","mtime":1553223778000},{"path":"/Users/xuyangbing/Desktop/devopsManage/client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/xuyangbing/Desktop/devopsManage/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/xuyangbing/Desktop/devopsManage/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\nimport { Terminal } from 'xterm'\nimport 'xterm/dist/xterm.css'\nimport * as fit from 'xterm/lib/addons/fit/fit'\nimport * as attach from 'xterm/lib/addons/attach/attach'\n//import SockJS from '../../public/js/sockjs.min.js'\nTerminal.applyAddon(fit)\nTerminal.applyAddon(attach)\n\n\nexport default {\n  name: 'pod',\n  data() {\n    return {\n      term: null,\n      websock: null,\n      timer: null\n    }\n  },\n  computed: {\n    terminalId() {\n      return `terminal_${this._uid}`\n    },\n    cluster() {\n      return this.$route.params.cluster\n    },\n    namespace() {\n      return localStorage.getItem('namespace')\n    },\n    pod() {\n      return localStorage.getItem('pod')\n    },\n    container() {\n      return this.$route.params.container\n    },\n    wsUrl() {\n      const protocol = window.location.protocol === 'http:' ? 'ws://' : 'wss://'\n      const host = window.location.host\n      return `${host}`\n      //return `${protocol}${host}`\n    },\n  },\n  mounted() {\n    const _self = this\n    this.term = new Terminal()\n    this.term.open(document.getElementById(this.terminalId))\n    this.initWebSocket()\n    this.term.on('data', function(data) {\n      // 写给服务端, 由服务端发给container\n      const msg = {type: \"input\", input: data}\n      _self.websocketsend(JSON.stringify(msg))\n    }),\n    window.addEventListener(\"resize\", function () {\n      this.term.fit()\n      // 把web终端的尺寸term.rows和term.cols发给服务端, 通知sshd调整输出宽度\n      const msg = {type: \"resize\", rows: this.term.rows, cols: this.term.cols}\n      _self.websocketsend(JSON.stringify(msg))\n      // console.log(term.rows + \",\" + term.cols)\n    })\n  },\n  beforeDestroy() {\n    if (this.term) {\n      this.term.destroy()\n    }\n    window.removeEventListener('resize', this.handleResize) // 移除获取高度事件\n  },\n  methods: {\n    initWebSocket() { // 初始化weosocket\n      //const wsurl = `${location.origin}/api/terminal/ws`\n      //const url = `${this.wsUrl}?namespace=${this.namespace}&pod=${this.pod}`\n      const url = `ws://${this.wsUrl}/api/v1/namespaces/${this.namespace}/pods/${this.pod}/exec?command=sh&stderr=true&stdin=true&stdout=true&tty=true`\n      // https://172.18.11.25:6443/api/v1/namespaces/default/pods/nginx-deployment-5cbd8757f-d5qvx/exec?command=sh&container=nginx&stderr=true&stdin=true&stdout=true&tty=true\n      //const url = `ws://${this.wsUrl}/api/terminal/ws?podNs=${this.namespace}&podName=${this.pod}` \n      //this.websock = new WebSocket(wsurl)\n      this.websock = new WebSocket(url)\n      this.websock.onmessage = this.websocketonmessage\n      this.websock.onopen = this.websocketonopen\n      this.websock.onerror = this.websocketonerror\n      this.websock.onclose = this.websocketclose\n    },\n    websocketonopen() { // 连接建立之后执行send方法发送数据\n    },\n    websocketonerror() { // 连接建立失败重连\n      this.term.write('连接出错\\r\\n')\n      // this.initWebSocket()\n    },\n    websocketonmessage(e) { // 数据接收\n      const redata = JSON.parse(e.data)\n      this.term.write(redata.output)\n    },\n    websocketsend(Data) { // 数据发送\n      if (this.websock.readyState === 1) {\n        this.websock.send(Data)\n      }\n    },\n    websocketclose(e) { // 关闭\n      console.log('断开连接', e)\n      this.socket.close()\n    },\n    handleResize() {\n      if (this.timer) {\n        clearTimeout(this.timer)\n        this.timer = null\n      }\n      this.timer = setTimeout(() => {\n        this.setTermSize()\n      }, 2000)\n    },\n    get_term_size() {\n      var initWidth = 9\n      var initHeight = 17\n\n      var windowsWidth = document.body.clientWidth\n      var windowsHeight = document.documentElement.clientHeight\n      return {\n        cols: Math.floor(windowsWidth / initWidth),\n        rows: Math.floor(windowsHeight / initHeight)\n      }\n    },\n    setTermSize() {\n      const { cols, rows } = this.get_term_size()\n      this.term.resize(cols, rows)\n      this.websock.send(JSON.stringify({type: \"resize\", rows: term.rows, cols: term.cols}))\n    },\n  }\n}\n",{"version":3,"sources":["Xterm.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Xterm.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div>\n    <div :id=\"terminalId\"/>\n  </div>\n</template>\n\n<script>\nimport { Terminal } from 'xterm'\nimport 'xterm/dist/xterm.css'\nimport * as fit from 'xterm/lib/addons/fit/fit'\nimport * as attach from 'xterm/lib/addons/attach/attach'\n//import SockJS from '../../public/js/sockjs.min.js'\nTerminal.applyAddon(fit)\nTerminal.applyAddon(attach)\n\n\nexport default {\n  name: 'pod',\n  data() {\n    return {\n      term: null,\n      websock: null,\n      timer: null\n    }\n  },\n  computed: {\n    terminalId() {\n      return `terminal_${this._uid}`\n    },\n    cluster() {\n      return this.$route.params.cluster\n    },\n    namespace() {\n      return localStorage.getItem('namespace')\n    },\n    pod() {\n      return localStorage.getItem('pod')\n    },\n    container() {\n      return this.$route.params.container\n    },\n    wsUrl() {\n      const protocol = window.location.protocol === 'http:' ? 'ws://' : 'wss://'\n      const host = window.location.host\n      return `${host}`\n      //return `${protocol}${host}`\n    },\n  },\n  mounted() {\n    const _self = this\n    this.term = new Terminal()\n    this.term.open(document.getElementById(this.terminalId))\n    this.initWebSocket()\n    this.term.on('data', function(data) {\n      // 写给服务端, 由服务端发给container\n      const msg = {type: \"input\", input: data}\n      _self.websocketsend(JSON.stringify(msg))\n    }),\n    window.addEventListener(\"resize\", function () {\n      this.term.fit()\n      // 把web终端的尺寸term.rows和term.cols发给服务端, 通知sshd调整输出宽度\n      const msg = {type: \"resize\", rows: this.term.rows, cols: this.term.cols}\n      _self.websocketsend(JSON.stringify(msg))\n      // console.log(term.rows + \",\" + term.cols)\n    })\n  },\n  beforeDestroy() {\n    if (this.term) {\n      this.term.destroy()\n    }\n    window.removeEventListener('resize', this.handleResize) // 移除获取高度事件\n  },\n  methods: {\n    initWebSocket() { // 初始化weosocket\n      //const wsurl = `${location.origin}/api/terminal/ws`\n      //const url = `${this.wsUrl}?namespace=${this.namespace}&pod=${this.pod}`\n      const url = `ws://${this.wsUrl}/api/v1/namespaces/${this.namespace}/pods/${this.pod}/exec?command=sh&stderr=true&stdin=true&stdout=true&tty=true`\n      // https://172.18.11.25:6443/api/v1/namespaces/default/pods/nginx-deployment-5cbd8757f-d5qvx/exec?command=sh&container=nginx&stderr=true&stdin=true&stdout=true&tty=true\n      //const url = `ws://${this.wsUrl}/api/terminal/ws?podNs=${this.namespace}&podName=${this.pod}` \n      //this.websock = new WebSocket(wsurl)\n      this.websock = new WebSocket(url)\n      this.websock.onmessage = this.websocketonmessage\n      this.websock.onopen = this.websocketonopen\n      this.websock.onerror = this.websocketonerror\n      this.websock.onclose = this.websocketclose\n    },\n    websocketonopen() { // 连接建立之后执行send方法发送数据\n    },\n    websocketonerror() { // 连接建立失败重连\n      this.term.write('连接出错\\r\\n')\n      // this.initWebSocket()\n    },\n    websocketonmessage(e) { // 数据接收\n      const redata = JSON.parse(e.data)\n      this.term.write(redata.output)\n    },\n    websocketsend(Data) { // 数据发送\n      if (this.websock.readyState === 1) {\n        this.websock.send(Data)\n      }\n    },\n    websocketclose(e) { // 关闭\n      console.log('断开连接', e)\n      this.socket.close()\n    },\n    handleResize() {\n      if (this.timer) {\n        clearTimeout(this.timer)\n        this.timer = null\n      }\n      this.timer = setTimeout(() => {\n        this.setTermSize()\n      }, 2000)\n    },\n    get_term_size() {\n      var initWidth = 9\n      var initHeight = 17\n\n      var windowsWidth = document.body.clientWidth\n      var windowsHeight = document.documentElement.clientHeight\n      return {\n        cols: Math.floor(windowsWidth / initWidth),\n        rows: Math.floor(windowsHeight / initHeight)\n      }\n    },\n    setTermSize() {\n      const { cols, rows } = this.get_term_size()\n      this.term.resize(cols, rows)\n      this.websock.send(JSON.stringify({type: \"resize\", rows: term.rows, cols: term.cols}))\n    },\n  }\n}\n</script>\n\n<style scoped>\n\n</style>\n"]}]}